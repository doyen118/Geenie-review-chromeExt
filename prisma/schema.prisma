// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  ADMIN
  USER
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  searches      UserSearch[]
  subscriptionId String? 
  sentEnterprise Boolean @default(false)
  sentEmail Boolean @default(false)
  lastLogin DateTime? 
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id       String @id @default(cuid())
  question String @db.Text
  main Boolean @default(false)
  order Int @default(0) 
  include Boolean @default(false)
  isChunks Boolean @default(false)
}

enum SearchVersion {
  versionOne
}

model Search {
  id         String   @id @default(cuid())
  searchedAt DateTime @default(now())
  asin      String @unique
  response String @db.Text
  chatResponse String @db.Text
  users       UserSearch[]    
  title String @db.VarChar(1000) @default("")
  stars Float @default(0)
  ratingCount Int
  reviewsCount Int
  img String?
  version SearchVersion @default(versionOne)
}

model UserSearch {
  id        String   @id @default(cuid())
  userId    String
  searchId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  search    Search   @relation(fields: [searchId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
model Subscription {
    id          String  @id @default(cuid())
    title String
    description String
    price Float?
    level Int @default(1)
    users User[]
    sPrice String? @default("")
    sPriceDev String? @default("")
    isPopular Boolean @default(false)
}